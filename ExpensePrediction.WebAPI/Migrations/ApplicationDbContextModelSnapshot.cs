// <auto-generated />
using System;
using ExpensePrediction.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExpensePrediction.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.ActivationToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Token");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivationTokens");
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.Expense", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<bool>("Main");

                    b.Property<string>("UserId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.ExpenseCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = "27a62b11-7765-473d-a1b6-7ecda9915dd5",
                            Name = "Żarcie"
                        },
                        new
                        {
                            Id = "7edeb282-6172-49b1-9a8f-5c3b25b7d0b8",
                            Name = "Alkohol"
                        },
                        new
                        {
                            Id = "87e0dc0a-8c6c-4773-b295-e32a78c4fc7f",
                            Name = "Samochód"
                        });
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.Income", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("UserId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Incomes");

                    b.HasData(
                        new
                        {
                            Id = "91fff8c5-72d9-4928-8135-0e0d972f25fa",
                            CategoryId = "fb9d333d-5e85-484b-bb35-ef307fd06379",
                            Date = new DateTime(2019, 1, 31, 12, 46, 43, 973, DateTimeKind.Local).AddTicks(7819),
                            Description = "Spadek po cioci",
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            Value = 2345.6700000000001
                        },
                        new
                        {
                            Id = "7c154df8-01fa-49e7-a14b-7398ae1f0711",
                            CategoryId = "fb9d333d-5e85-484b-bb35-ef307fd06379",
                            Date = new DateTime(2018, 12, 31, 12, 46, 43, 979, DateTimeKind.Local).AddTicks(973),
                            Description = "Spadek po cioci",
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            Value = 2345.6700000000001
                        },
                        new
                        {
                            Id = "e032ae84-1b11-4d60-8312-a417f17eae06",
                            CategoryId = "fb9d333d-5e85-484b-bb35-ef307fd06379",
                            Date = new DateTime(2018, 11, 30, 12, 46, 43, 979, DateTimeKind.Local).AddTicks(997),
                            Description = "Spadek po cioci",
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            Value = 2345.6700000000001
                        },
                        new
                        {
                            Id = "5e96d9d1-cf7c-481c-b8b1-79c61d5130cd",
                            CategoryId = "fb9d333d-5e85-484b-bb35-ef307fd06379",
                            Date = new DateTime(2018, 10, 31, 12, 46, 43, 979, DateTimeKind.Local).AddTicks(1003),
                            Description = "Spadek po cioci",
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            Value = 2345.6700000000001
                        },
                        new
                        {
                            Id = "1e364cc0-c1fd-416e-8a6c-f2ce00ba973f",
                            CategoryId = "fb9d333d-5e85-484b-bb35-ef307fd06379",
                            Date = new DateTime(2018, 9, 30, 12, 46, 43, 979, DateTimeKind.Local).AddTicks(1007),
                            Description = "Spadek po cioci",
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            Value = 2345.6700000000001
                        },
                        new
                        {
                            Id = "3eba73e5-bf1a-4e26-97d8-25aa10d7eaa6",
                            CategoryId = "fb9d333d-5e85-484b-bb35-ef307fd06379",
                            Date = new DateTime(2018, 8, 31, 12, 46, 43, 979, DateTimeKind.Local).AddTicks(1012),
                            Description = "Spadek po cioci",
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            Value = 2345.6700000000001
                        });
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.IncomeCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("IncomeCategories");

                    b.HasData(
                        new
                        {
                            Id = "fb9d333d-5e85-484b-bb35-ef307fd06379",
                            Name = "Przychód regularny"
                        },
                        new
                        {
                            Id = "10c0cb83-1cb2-4c24-84ca-1757225bb97d",
                            Name = "Przychód jednorazowy"
                        });
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2fdbec88-4aa9-430c-8359-8b27756cf1ca",
                            ConcurrencyStamp = "07adaea7-ca24-4e34-b750-5d9638eaa334",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "307d5d07-87cf-49a0-9cd4-b925b5380963",
                            ConcurrencyStamp = "8f08ab37-ee17-436b-b2f8-1878e978bfa9",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11cb73c5-ac99-4500-af9d-6b1f29ce298f",
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEODZFtx31yVlQlAo6GcTs2dIyi/Dcch0/uqv27PvT/xXzy5+JAZEMVS5SvM13yrMdQ==",
                            PhoneNumber = "123456780",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            RoleId = "2fdbec88-4aa9-430c-8359-8b27756cf1ca"
                        },
                        new
                        {
                            UserId = "830f0d08-6a56-4a57-83c9-329c094f184b",
                            RoleId = "307d5d07-87cf-49a0-9cd4-b925b5380963"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.ActivationToken", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.Expense", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.ExpenseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ExpensePrediction.DataAccessLayer.Entities.Income", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.IncomeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExpensePrediction.DataAccessLayer.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
